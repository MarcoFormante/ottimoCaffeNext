// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role{
  ADMIN
  USER
}

model User {
  id    Int     @id @default(autoincrement())
  surname String @db.VarChar(255)
  email String  @unique @db.VarChar(60)
  role Role 
}


model Costumer {
  id    Int     @id @default(autoincrement())
  name  String @db.VarChar(255)
  surname String @db.VarChar(255)
  email String  @unique 

  Orders Order[]
}

model Category {
  id    Int     @id @default(autoincrement())
  name  String @db.VarChar(255)
  description String? @db.Text

  Product Product[]
}


model Product {
  id    Int     @id @default(autoincrement()) 
  is_active Boolean
  price Decimal @db.Decimal(10,2)
  name String @db.VarChar(255)
  promotion  Decimal @db.Decimal(10,2)
  description String @db.Text
  img_url String @db.VarChar(255)
  created_at DateTime
  updated_At DateTime
  rating Decimal? @db.Decimal(1,1) 
  category_id Int
  category Category @relation(fields: [category_id],references: [id])

  Orders Order[]
  Order_Item Order_Item[]
}

enum Status {
  ELABORATION 
  NOT_SENT
  SENDING
}

model Order{
  id        Int @id @default(autoincrement())
  costumer_id   Int 
  product_id Int
  status    Status 
  total_amount Decimal @db.Decimal(10,2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt 
  costumer    Costumer    @relation(fields: [costumer_id], references: [id])
  product Product @relation(fields: [product_id], references: [id])

  Order_Items Order_Item[]
}



model Order_Item{
  id        Int @id @default(autoincrement())
  order_id   Int
  product_id Int
  quantity  Int
  price Decimal @db.Decimal(10,2)
  total_price Decimal @db.Decimal(10,2)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  order    Order    @relation(fields: [order_id], references: [id])
  product    Product    @relation(fields: [product_id], references: [id])
}

